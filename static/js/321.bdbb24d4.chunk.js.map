{"version":3,"file":"static/js/321.bdbb24d4.chunk.js","mappings":"+RAEAA,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAEL,SAASC,IACb,OAAOF,IAAAA,IAAA,uCAA0CC,GAEnD,CAEM,SAASE,EAAiBC,GAC9B,OAAOJ,IAAAA,IAAA,gCAAmCC,EAAnC,kBAAgDG,EAAhD,+BACT,CAEM,SAASC,EAAaC,GAC1B,OAAON,IAAAA,IAAA,iBAAoBM,EAApB,oBAAkCL,GAC3C,CAEM,SAASM,EAAiBD,GAC9B,OAAON,IAAAA,IAAA,iBAAoBM,EAApB,4BAA0CL,GACnD,CAEM,SAASO,EAAoBF,GACjC,OAAON,IAAAA,IAAA,iBAAoBM,EAApB,4BAA0CL,GACnD,C,0JCrBYQ,EAAOC,EAAAA,GAAAA,KAAH,mJASJC,EAAQD,EAAAA,GAAAA,MAAH,2bAwBLE,EAASF,EAAAA,GAAAA,OAAH,gfAwBNG,EAAYH,EAAAA,GAAAA,GAAH,6HAQTI,EAAYJ,EAAAA,GAAAA,GAAH,6CAITK,GAAaL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,oJAYVO,EAAUP,EAAAA,GAAAA,IAAH,mQAUPQ,EAAWR,EAAAA,GAAAA,EAAH,uJ,mBC9Ed,SAASS,IAEf,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOhB,EAAP,KAAciB,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAGA,GAA4BH,EAAAA,EAAAA,UAAS,MAArC,eAAOI,EAAP,KAAeC,EAAf,KAGMC,GAAOC,EAAAA,EAAAA,UAEPC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACL1B,IACHmB,GAAa,IACbpB,EAAAA,EAAAA,IAAiBC,GACf2B,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACRC,QAAQC,IAAIF,GACZP,EAAUO,EAAKG,QACf,IACAC,MAAMH,QAAQC,OACdG,SAAQ,WACRd,GAAa,EACb,IAEH,GAAE,CAACnB,IAWJ,OACC,iCACC,UAACK,EAAD,CAAM6B,IAAKZ,EAAMa,SAXM,SAAAC,GACxBA,EAAEC,iBACF,IAAQC,EAAgBF,EAAEG,OAAOC,SAAzBF,YACRrB,EAASqB,EAAYG,OAGrBnB,EAAKoB,QAAQC,OACb,EAIC,WACC,SAACpC,EAAD,CAAOqC,KAAK,cAAcC,YAAY,2BACtC,SAACrC,EAAD,CAAQsC,KAAK,SAAb,uBAGA5B,GACA,SAAC6B,EAAA,EAAD,KAEA,SAACtC,EAAD,UACEW,GACAA,EAAO4B,KAAI,gBAAG9C,EAAH,EAAGA,GAAI+C,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACV,SAACxC,EAAD,WACC,UAACC,EAAD,CAAYwC,GAAE,kBAAajD,GAAMkD,MAAO,CAAEC,KAAM7B,GAAhD,WACC,SAACX,EAAD,CACCyC,IAAKL,EACLM,IAAG,wCAAmCL,MAGvC,SAACpC,EAAD,UAAWmC,QAPG/C,EADN,QAgBhB,C","sources":["api/movieDBApi.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = 'b97b15a6557134236e51fc0964baa8bb';\n\nexport function getTrendingMovies() {\n   return axios.get(`/trending/movie/week?api_key=${KEY}`)\n\n}\n\nexport function getMoviesByQuery(query) {\n   return axios.get(`/search/movie?api_key=${KEY}&query=${query}&page=1&include_adult=false`)\n}\n\nexport function getMovieById(id) {\n   return axios.get(`/movie/${id}?api_key=${KEY}`)\n}\n\nexport function getMovieCastById(id) {\n   return axios.get(`/movie/${id}/credits?api_key=${KEY}`)\n}\n\nexport function getMovieReviewsById(id) {\n   return axios.get(`/movie/${id}/reviews?api_key=${KEY}`)\n}","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Form = styled.form`\n\twidth: 500px;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tgap: 15px;\n\tmargin: 40px auto;\n`;\n\nexport const Input = styled.input`\n\tdisplay: block;\n\twidth: 100%;\n\tmargin: auto;\n\tpadding: 13px;\n\n\tbox-shadow: rgba(121, 121, 157, 0.25) 0px 30px 60px -12px inset,\n\t\trgba(243, 240, 240, 0.3) 0px 18px 36px -18px inset;\n\n\toutline: none;\n\tborder: 0;\n\n\tborder-radius: 20px;\n\n\tfont-family: 'Roboto', sans-serif;\n\tbackground: transparent;\n\n\tcolor: #de6b10;\n\n\t:-webkit-autofill {\n\t\ttransition: all 5000s ease-in-out 0s;\n\t}\n`;\n\nexport const Button = styled.button`\n\twidth: 20%;\n\theight: 35px;\n\tpadding: 5px 15px;\n\n\tfont-size: 14px;\n\tfont-weight: 500;\n\n\topacity: 1;\n\tbackground-color: rgba(50, 50, 93, 0.25);\n\t\n\tborder: none;\n\tbox-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\nborder-radius: 20px;\n\tcolor: white;\n\n\tcursor: pointer;\n\ttransition: transform 250ms linear;\n\n\t:hover {\n\t\ttransform: scale(1.1);\n\t}\n`;\n\nexport const MovieList = styled.ul`\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-wrap: wrap;\n\tgap: 20px;\n\tlist-style: none;\n`;\n\nexport const MovieItem = styled.li`\n\t/* width: 20%; */\n`;\n\nexport const StyledLink = styled(Link)`\n\ttext-decoration: none;\n\n\t&:focus,\n\t&:hover,\n\t&:visited,\n\t&:link,\n\t&:active {\n\t\ttext-decoration: none;\n\t}\n`;\n\nexport const HomeImg = styled.img`\n\tdisplay: block;\n\twidth: 300px;\n\theight: 450px;\n\tborder-radius: 20px;\n\tbox-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n\t\trgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n\t\trgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n`;\n\nexport const HomeText = styled.p`\n\tfont-family: 'Scada', sans-serif;\n\tfont-size: 16px;\n\tcolor: white;\n\n\t&:focus,\n\t&:hover {\n\t\tcolor: #de6b10;\n\t}\n`;\n","import { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getMoviesByQuery } from '../../api/movieDBApi';\nimport {\n\tForm,\n\tInput,\n\tButton,\n\tMovieList,\n\tMovieItem,\n\tStyledLink,\n\tHomeImg,\n\tHomeText\n} from './Movies.styled';\nimport { Loader } from 'components/Loader';\n\n\nexport function Movies() {\n\t//для хранения значений с инпута\n\tconst [query, setQuery] = useState('');\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\t// для хранения массива с сервера\n\tconst [movies, setMovies] = useState(null);\n\n\t//для хранения ссылки на нашу форму\n\tconst form = useRef();\n\n\tconst location = useLocation();\n\n\tuseEffect(() => {\n\t\tif (query) {\n\t\t\tsetIsLoading(true);\n\t\t\tgetMoviesByQuery(query)\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t\tsetMovies(data.results);\n\t\t\t\t})\n\t\t\t\t.catch(console.log())\n\t\t\t\t.finally(() => {\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t});\n\t\t}\n\t}, [query]);\n\n\tconst handleSubmitForm = e => {\n\t\te.preventDefault();\n\t\tconst { searchQuery } = e.target.elements;\n\t\tsetQuery(searchQuery.value);\n\n\t\t//чистка формы при помощи реф и свойства current\n\t\tform.current.reset();\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Form ref={form} onSubmit={handleSubmitForm}>\n\t\t\t\t<Input name=\"searchQuery\" placeholder=\"Enter movie to search\"></Input>\n\t\t\t\t<Button type=\"submit\">Search</Button>\n\t\t\t</Form>\n\n\t\t\t{isLoading ? (\n\t\t\t\t<Loader />\n\t\t\t) : (\n\t\t\t\t<MovieList>\n\t\t\t\t\t{movies &&\n\t\t\t\t\t\tmovies.map(({ id, title, poster_path }) => (\n\t\t\t\t\t\t\t<MovieItem key={id}>\n\t\t\t\t\t\t\t\t<StyledLink to={`/movies/${id}`} state={{ from: location }}>\n\t\t\t\t\t\t\t\t\t<HomeImg\n\t\t\t\t\t\t\t\t\t\talt={title}\n\t\t\t\t\t\t\t\t\t\tsrc={`http://image.tmdb.org/t/p/w500${poster_path}`}\n\t\t\t\t\t\t\t\t\t\t// width={200}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<HomeText>{title}</HomeText>\n\t\t\t\t\t\t\t\t</StyledLink>\n\t\t\t\t\t\t\t</MovieItem>\n\t\t\t\t\t\t))}\n\t\t\t\t</MovieList>\n\t\t\t)}\n\t\t</>\n\t);\n}\n\n"],"names":["axios","KEY","getTrendingMovies","getMoviesByQuery","query","getMovieById","id","getMovieCastById","getMovieReviewsById","Form","styled","Input","Button","MovieList","MovieItem","StyledLink","Link","HomeImg","HomeText","Movies","useState","setQuery","isLoading","setIsLoading","movies","setMovies","form","useRef","location","useLocation","useEffect","then","data","console","log","results","catch","finally","ref","onSubmit","e","preventDefault","searchQuery","target","elements","value","current","reset","name","placeholder","type","Loader","map","title","poster_path","to","state","from","alt","src"],"sourceRoot":""}